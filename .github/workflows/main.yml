name: Collect Input and Log to CSV

on:
  schedule:
    - cron: '*/5 * * * *' 
  workflow_dispatch:
    inputs:
      log_entry:
        description: 'Input data to log'
        required: true
        default: 'default entry'
      server:
         description: 'server detail'
         required: true
         default: 'Azure'
      scheduleTime:
         description: 'enter time of execution'
         required: true
         default: $(date +"%Y-%m-%d %H:%M:%S")


permissions:
  contents: write  # Allows actions to write to the repository

jobs:
  log-input:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Append input to CSV
        run: |
          # Check if the CSV file exists, create it if not
          if [ ! -f input_log.csv ]; then
            echo "log_entry,server,scheduleTime" > input_log.csv
          fi
          # Append the input to the CSV
          echo "${{ github.event.inputs.log_entry}},${{ github.event.inputs.server }},${{ github.event.inputs.scheduleTime }}" >> input_log.csv
   
      - name: Commit changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add input_log.csv
          git commit -m "Log input entry: ${{ github.event.inputs.log_entry }}"
          git pull
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  check-schedule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Read CSV, execute jobs and delete processed entries
        id: run_jobs
        run: |
          import csv
          from datetime import datetime
          import shutil

          # Define file paths
          input_file = 'input_log.csv'
          temp_file = 'temp_input_log.csv'

          # Get current time
          current_time = datetime.now()

          # Open and read the input CSV file
          with open(input_file, mode='r') as infile:
              csv_reader = csv.DictReader(infile)
              rows_to_keep = []
              jobs_to_run = []

              # Loop through each row and check the scheduleTime
              for row in csv_reader:
                  schedule_time = datetime.strptime(row['scheduleTime'], "%Y-%m-%d %H:%M:%S")

                  # If the scheduled time is in the past or present, add the job to jobs_to_run
                  if schedule_time <= current_time:
                      jobs_to_run.append(row)
                  else:
                      rows_to_keep.append(row)

              # Log the jobs that need to be run
              if jobs_to_run:
                  print(f"Jobs to run: {jobs_to_run}")
                  print(f"::set-output name=jobs_to_run::{jobs_to_run}")
              else:
                  print("No jobs to run at this time.")

          # Write the remaining rows (future jobs) back to the CSV
          with open(temp_file, mode='w', newline='') as outfile:
              fieldnames = ['log_entry', 'server', 'scheduleTime', 'file_name']
              csv_writer = csv.DictWriter(outfile, fieldnames=fieldnames)
              csv_writer.writeheader()
              csv_writer.writerows(rows_to_keep)

          # Optionally, replace the old file with the updated one
          shutil.move(temp_file, input_file)

      - name: Run scheduled jobs
        if: steps.run_jobs.outputs.jobs_to_run != '[]'
        run: |
          jobs_to_run="${{ steps.run_jobs.outputs.jobs_to_run }}"
          echo "Running the scheduled jobs: $jobs_to_run"
          
          # Process the jobs and execute them
          for job in $(echo $jobs_to_run | jq -r '.[].log_entry'); do
            echo "Running job: $job"
            # Insert your job logic here, e.g., run scripts or commands based on log_entry
          done

      - name: Handle no jobs to run
        if: steps.run_jobs.outputs.jobs_to_run == '[]'
        run: echo "No jobs need to be run at this time."
