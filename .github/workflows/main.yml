name: Collect Input and Log to CSV

on:
  schedule:
    - cron: '*/5 * * * *' 
  workflow_dispatch:
    inputs:
      log_entry:
        description: 'Input data to log'
        required: true
        default: 'default entry'
      server:
         description: 'server detail'
         required: true
         default: 'Azure'
      scheduleTime:
         description: 'enter time of execution'
         required: true
         default: $(date +"%Y-%m-%d %H:%M:%S")


permissions:
  contents: write  # Allows actions to write to the repository

jobs:
  log-input:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Append input to CSV
        run: |
          # Check if the CSV file exists, create it if not
          if [ ! -f input_log.csv ]; then
            echo "log_entry,server,scheduleTime" > input_log.csv
          fi
          # Append the input to the CSV
          echo "${{ github.event.inputs.log_entry}},${{ github.event.inputs.server }},${{ github.event.inputs.scheduleTime }}" >> input_log.csv
   
      - name: Commit changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add input_log.csv
          git commit -m "Log input entry: ${{ github.event.inputs.log_entry }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  check-schedule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read CSV and Check Time
        id: check_time
        run: |
          # Get current date and time in the format YYYY-MM-DD HH:MM
          current_time=$(date +"%Y-%m-%d %H:%M")
          echo "Current time: $current_time"
          
          # Check if any entry in the CSV is less than the current time
          while IFS=, read -r run_time; do
            if [ "$scheduleTime" != "scheduleTime" ]; then  # Skip header
              if [[ "$scheduleTime" < "$current_time" ]]; then
                echo "Job scheduled for $run_time has passed."
                echo "::set-output name=run_job::true"
                exit 0
              fi
            fi
          done < input_log.csv

          echo "No jobs have passed the current time."
          echo "::set-output name=run_job::false"

      - name: Run Job if Time is Passed
        if: steps.check_time.outputs.run_job == 'true'
        run: |
          echo "Running scheduled job because the time has passed."
          # Place your job logic here
