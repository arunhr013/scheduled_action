name: Collect Input and Log to CSV

on:
  schedule:
    - cron: '*/5 * * * *' 
  workflow_dispatch:
    inputs:
      log_entry:
        description: 'Input data to log'
        required: true
        default: 'default entry'
      server:
         description: 'server detail'
         required: true
         default: 'Azure'
      scheduleTime:
         description: 'enter time of execution'
         required: true
         default: $(date +"%Y-%m-%d %H:%M:%S")


permissions:
  contents: write  # Allows actions to write to the repository

jobs:
  log-input:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Append input to CSV
        run: |
          # Check if the CSV file exists, create it if not
          if [ ! -f input_log.csv ]; then
            echo "log_entry,server,scheduleTime" > input_log.csv
          fi
          # Append the input to the CSV
          echo "${{ github.event.inputs.log_entry}},${{ github.event.inputs.server }},${{ github.event.inputs.scheduleTime }}" >> input_log.csv
   
      - name: Commit changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add input_log.csv
          git commit -m "Log input entry: ${{ github.event.inputs.log_entry }}"
          git pull
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  check-schedule:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Process CSV and execute jobs
        run: |
          # Current time in the format YYYY-MM-DD HH:MM:SS
          current_time=$(date "+%Y-%m-%d %H:%M:%S")
          
          input_file="input_log.csv"
          temp_file="temp_input_log.csv"
          
          # Create an empty temporary file for the new CSV
          touch "$temp_file"
          
          # Loop through each row of the CSV and process it
          while IFS=, read -r log_entry server scheduleTime file_name; do
            # Skip header row
            if [ "$log_entry" == "log_entry" ]; then
              continue
            fi
            
            # Check if scheduleTime is less than or equal to current time
            if [[ "$scheduleTime" < "$current_time" || "$scheduleTime" == "$current_time" ]]; then
              echo "Job scheduled for $log_entry has passed. Executing it now."
              
              # Add your job execution logic here, for example:
              # ./run_job.sh "$log_entry" "$server" "$file_name"
              echo "Executing job for $log_entry"
            else
              # If the job is in the future, keep the row in the temp file
              echo "$log_entry,$server,$scheduleTime,$file_name" >> "$temp_file"
            fi
          done < "$input_file"
          
          # Use cp instead of mv to replace the original file with the new one
          cp "$temp_file" "$input_file"

          ls -l "$input_file"
          cat "$input_file"

           ls -l "$temp_file"
          cat "$temp_file"
          
          # Optionally, clean up the temp file
          rm "$temp_file"
          


      # Step 3: Handle case when no jobs were executed
      - name: No jobs to run
        if: success() && steps.process_csv.outputs.jobs_to_run == ''
        run: echo "No jobs need to be run at this time."
