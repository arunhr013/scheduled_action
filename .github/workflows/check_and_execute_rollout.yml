name: Check and Execute Rollout
permissions:
  contents: write  # Allow write access to the repository contents (including committing)
  
on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes, adjust as needed.
  workflow_dispatch:  # Allows for manual triggering if needed.

jobs:
  check_rollout_schedule:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Read CSV file, execute rollouts, and remove executed rows
        run: |
          # Initialize an empty array to store rows where ScheduledTime <= current_time
          valid_rollouts=()
          remaining_rows=()

          # Read the CSV file and process each row
          while IFS=',' read -r timestamp server environment scheduled_time description user status

          do
            # Skip the header row
            if [[ "$timestamp" != "timestamp" ]]; then
              echo "Checking rollout for $server scheduled at $scheduled_time"

              # Get the current time in the same format as ScheduledTime (for comparison)
              current_time=$(date +"%Y-%m-%d %H:%M:%S")

              echo "Current time: $current_time"

              # Compare ScheduledTime with current_time
              # Proper syntax for string comparison
              echo "ScheduledTime: $scheduled_time"
              echo "Current time: $current_time"
              if [[ "$scheduled_time" < "$current_time" || "$scheduled_time" == "$current_time" ]]; then
                echo "ScheduledTime for $server is equal to or earlier than current time. Adding to valid rollouts."
                
                # Store the valid row in the array for execution
                valid_rollouts+=("$server,$scheduled_time")
              else
                # Keep the remaining row for future processing
                remaining_rows+=("$timestamp,$server,$environment,$scheduled_time,$description,$user,$status")
              fi
            fi
          done < .github/schedules/rollout_schedule.csv
        


          # Output all valid rollouts
          if [ ${#valid_rollouts[@]} -gt 0 ]; then
            echo "Executing rollouts for the following servers:"
            for rollout in "${valid_rollouts[@]}"; do
            server=$(echo $rollout | cut -d',' -f1)
            time=$(echo $rollout | cut -d',' -f2)

            echo "Triggering rollout for $server at $time"
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/rollout.yml/dispatches \
              -d '{
                    "ref": "main",
                    "inputs": {
                      "server_name": "'"$server"'",
                      "scheduled_time": "'"$time"'"
                    }
                  }'
          done
          else
            echo "No rollouts scheduled for the current time or earlier."
          fi

          # Write the remaining rows back into the CSV file, excluding executed rollouts
          echo "timestamp,server,environment,scheduled_time,description,user,status" > .github/schedules/rollout_schedule.csv
          for row in "${remaining_rows[@]}"; do
            echo "$row" >> .github/schedules/rollout_schedule.csv
          done

      
      - name: Check if CSV file was modified
        run: |
          git status

      - name: Commit updated CSV if changes were made
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: 'Update rollout schedule'
          add: 'rollout_schedule.csv'
          
