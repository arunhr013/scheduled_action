name: Check and Execute Rollout

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes, adjust as needed.
  workflow_dispatch:  # Allows for manual triggering if needed.

jobs:
  check_rollout_schedule:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Read CSV file, execute rollouts, and remove executed rows
        run: |
          # Initialize an empty array to store rows where ScheduledTime <= current_time
          valid_rollouts=()
          remaining_rows=()

          # Read the CSV file and process each row
          while IFS=',' read -r ServerName ScheduledTime
          do
            # Skip the header row
            if [[ "$ServerName" != "ServerName" ]]; then
              echo "Checking rollout for $ServerName scheduled at $ScheduledTime"

              # Get the current time in the same format as ScheduledTime (for comparison)
              current_time=$(date +"%Y-%m-%d %H:%M:%S")

              echo "Current time: $current_time"

              # Compare ScheduledTime with current_time
              # Proper syntax for string comparison
              echo "ScheduledTime: $ScheduledTime"
              echo "Current time: $current_time"
              if [[ "$ScheduledTime" <= "$current_time" ]]; then
                echo "ScheduledTime for $ServerName is equal to or earlier than current time. Adding to valid rollouts."
                
                # Store the valid row in the array for execution
                valid_rollouts+=("$ServerName,$ScheduledTime")
              else
                # Keep the remaining row for future processing
                remaining_rows+=("$ServerName,$ScheduledTime")
              fi
            fi
          done < rollout_schedule.csv

          # Output all valid rollouts
          if [ ${#valid_rollouts[@]} -gt 0 ]; then
            echo "Executing rollouts for the following servers:"
            for rollout in "${valid_rollouts[@]}"; do
              echo "Executing rollout for: $rollout"
              
              # Insert your rollout execution logic here, e.g., triggering an API, script, etc.
              # Example: curl -X POST "https://api.example.com/execute_rollout?server=${rollout[0]}"
            done
          else
            echo "No rollouts scheduled for the current time or earlier."
          fi

          # Write the remaining rows back into the CSV file, excluding executed rollouts
          echo "ServerName,ScheduledTime" > rollout_schedule.csv
          for row in "${remaining_rows[@]}"; do
            echo "$row" >> rollout_schedule.csv
          done

      - name: Check if CSV file was modified
        run: |
          git status

      - name: Commit updated CSV if changes were made
        run: |
          # Ensure that changes are staged, committed, and pushed if any
          git add rollout_schedule.csv
          git commit -m "Update rollout schedule after processing" || echo "No changes to commit"
          git push
